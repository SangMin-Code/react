React

Component 만드는 방법
1. Class 이용하기
    React에서 제공하는 Component 를 상속
    state가 필요할 경우
    state가 변경되면서 render가 자동으로 실행
    Compnent 상태(사용자에게 보여질때, Dom tree에 올라갈때, Dom tree에 내려왔을때, Component가 업데이트 될때)
    에 따라 구현해놓은 함수를
    자동으로 실행시켜주는  lifecycle method가 있음
2. Function 이용하기
    함수로 만들기
    state가 필요없이 정적으로 데이터 표기할 경우
    lifecycle method는 없음
    * React 16.8 이후부터 React Hook이 도입되면서 
      state, lifecycle 사용 가능
    * class와 동일한 기능을 제공한 이유?
      class가 구성하기 어렵기 때문 - 객체지향언어를 하지 않은 사람들을 위한
      member 변수에 this를 사용하는것이 불편
      class 사용할 경우 binding issue 문제
      함수형 프로그래밍을 위해 도입
    * React Hook은 최근 도입, 기존의 프로젝트들은 Class를 사용한 경우가 많음.
    * 팀 스타일에 따라 사용여부 갈림

    Component 종류
    React.Component  | Function
 React.PureComponent | memo(function) -> HigerOrder Component
                     |  React Hook

keyword

JSX, state,Prpos ,SyntheticEvents,
refs, LifeCycle methods, Lists and keys
developer tools technique

React-Dom
-> React는 자바스크립트로 컴포넌트를 만드는데
  브라우저는 자바스크립트만을 이해할 수 있음.
  React에 쓴 코드가 바벨을 통해 자바스크립트로 변환
  만든 컴포넌트를 html과 연결하는 작업을
  react-dom이 해준다.

  index.html에서 root와 javascript와 연결
  최상위 연결해주는 컴포넌트가 App
  *strictMode -> use strict 역할
   개발시에는 strict 되지만 배포시에는 영향없으므로 같이 배포해도 무관


JSX
JSX가 있기 전에는 element 만들어 내용을 지정했어야 했음.
디자이너, 개발자에게 간편하게 html로 사용할 수 없었으므로 불편
직관적으로 html처럼 사용할 수 있게 만들어줌.
HTML은 마크업 언어이지만 JSX는 엄밀히 말하면 자바스크립트코드
바벨이 자바스크립트로 변환해줌
형제 node를 사용할 수 없음.
JSX는 한 가지의 태그로 감싸야 함

	// React.Fragment를 사용않고 <></>를 사용해도 동일
	// JSX는 다수의 태그를 return할 수 없다. 형제 노드가 있을 경우 묶어야함.
	// JSX 코드 내에서는 javscript code 작성이 가능하다.
	// <div>
	// 	<h1>Hello</h1>
	// 	<h1>Hello</h1>
	// </div>
	// -> 쓸데 없는 div tag 사용

  React_event
-> React에는 SyntheticEvents로 일반  DOM 요소에서 발생하는 event와는 조금 다름
   브라우저에서 발생하는 이벤틀를 한단계 더 감싸서 component에 전달
   브라우저에서 사용하는 기능들을 기본적으로 사용은 가능함.


* index strictmode - >react 가 두번씩 호출하면서 한번 호출시 잘못된 것을 검사
개발할때만 보여지고 배포시에는 적용되지않음

* React Component의 state가 변할 때 모든 Component가
  reder가 됨에도 불구하고 성능이 좋은 이유?
  -> DOM요소에 VDOM에서 실제 업데이트가 필요한 내용만 업데이트 되므로
  Debuging시 DOM요소가 변화가 일어난다면 뭔가 잘못된 상태일 수 있음

* 브라우저에서 Update되는 Component 확인방법
  -> react Component setting의 hilightUpdate 체크
  

PureComponent

